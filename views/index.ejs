
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Joma's Starter Template for NodeJs Web App</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">

  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Youtube Together!</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <form class="form-inline">
          <input class="form-control mr-sm-2" type="text" placeholder="Search..." name="search" id="search">
          <button class="btn btn-outline-success my-2 my-sm-0" type="button" id="searchbutton" onclick="searchPressed()">
            <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
            </button>
          </form>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">
      <div id="player"></div>
      
      <div id="controls">
        <div style="display:flex; flex-direction:row; flex-wrap:wrap;">
  
        
   
  
        <div class = "btn-group" id = "buttons"> 
        <button type="button" class="btn btn-default" onclick="playVideo()">
          <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
        </button>
        <button type="button" class="btn btn-default" onclick="pauseVideo()">
          <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
        </button>
        </div>
        <div id="progressBar">
          <div id="line"> </div>
          <div id="square"></div>
        </div>
      </div>
    </div>
  
      <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');
  
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  
        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        var justStartedPlaying = false
  
        function onYouTubeIframeAPIReady() {
          player = new YT.Player('player', {
            height: '480',
            width: '720',
            videoId: 'mPVDGOVjRQ0',
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange
            }
          });
        }
  
        function searchPressed() {
          var urlBeforeParsing = document.getElementById("search").value;
          var parsedUrl = urlBeforeParsing.replace("https://www.youtube.com/watch?v=", '');
          player.loadVideoById(parsedUrl)
          player.playVideo();
        }
  
        function upgradeProgress() {
          var progressBar = $('.progressBar');
          var progressSquare = $('#square');
  
          progressBar.click(function(event) {
            var divOffset = $(this).offset();
            console.log(divOffset);
          });
  
          setInterval(function(){
          if(player == null || progressBar == null) return;
          var fraction = (player.getCurrentTime() / player.getDuration()) * 100;
          progressSquare.css("left", fraction.toString() + "%");
          }, 200);
        }
        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
          event.target.playVideo();
        }
  
        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var playerStatus;
        function onPlayerStateChange(event) {
          playerStatus = event.data;
        }
  
        function playVideo() {
          if( playerStatus == YT.PlayerState.PAUSED)  player.playVideo();
        }
        function pauseVideo() {
          if (playerStatus == YT.PlayerState.PLAYING) player.pauseVideo();
        }
      </script>
  <!-- /.container -->

    </div><!-- /.container -->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="js/jquery.min.js"><\/script>')</script>
    <script src="js/bootstrap.min.js"></script>
  </body>
</html>
